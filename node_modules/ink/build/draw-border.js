"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cli_boxes_1 = __importDefault(require("cli-boxes"));
const chalk_1 = __importDefault(require("chalk"));
exports.default = (x, y, node, output) => {
    if (typeof node.style.borderStyle === 'string') {
        const style = node.style.borderStyle;
        const color = node.style.borderColor;
        const topLeftCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].topLeft)
            : cli_boxes_1.default[style].topLeft;
        const topRightCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].topRight)
            : cli_boxes_1.default[style].topRight;
        const bottomLeftCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].bottomLeft)
            : cli_boxes_1.default[style].bottomLeft;
        const bottomRightCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].bottomRight)
            : cli_boxes_1.default[style].bottomRight;
        const horizontalCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].horizontal)
            : cli_boxes_1.default[style].horizontal;
        const verticalCharacter = color
            ? chalk_1.default[color](cli_boxes_1.default[style].vertical)
            : cli_boxes_1.default[style].vertical;
        const width = node.yogaNode.getComputedWidth();
        const height = node.yogaNode.getComputedHeight();
        const topBorder = topLeftCharacter +
            horizontalCharacter.repeat(width - 2) +
            topRightCharacter;
        let verticalBorder = '';
        for (let index = 0; index < height - 2; index++) {
            verticalBorder += verticalCharacter + '\n';
        }
        const bottomBorder = bottomLeftCharacter +
            horizontalCharacter.repeat(width - 2) +
            bottomRightCharacter;
        output.write(x, y, topBorder, { transformers: [] });
        output.write(x, y + 1, verticalBorder, { transformers: [] });
        output.write(x + width - 1, y + 1, verticalBorder, { transformers: [] });
        output.write(x, y + height - 1, bottomBorder, { transformers: [] });
    }
};
//# sourceMappingURL=draw-border.js.map
import React from 'react';
import type { ReactNode } from 'react';
import chalk from 'chalk';
import type { Chalk } from 'chalk';
import type { Except } from 'type-fest';
declare type Colors = typeof chalk.ForegroundColor | typeof chalk.BackgroundColor | typeof chalk.Modifiers;
declare type ChalkFunctions = Except<Except<Chalk, 'Instance' | 'level'>, Colors>;
declare type ChalkFunctionProps = {
    [K in keyof ChalkFunctions]: Parameters<ChalkFunctions[K]> extends [string] ? string : Parameters<ChalkFunctions[K]>;
};
declare type ChalkBooleanProps = Record<Colors, boolean>;
declare type ChalkProps = Partial<ChalkBooleanProps & ChalkFunctionProps>;
export declare type Props = ChalkProps & {
    children: ReactNode;
};
declare const _default: React.NamedExoticComponent<Props>;
export default _default;

"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const prop_types_1 = __importDefault(require("prop-types"));
const arrify_1 = __importDefault(require("arrify"));
const chalk_1 = __importDefault(require("chalk"));
const Transform_1 = __importDefault(require("./Transform"));
const methods = [
    'hex',
    'hsl',
    'hsv',
    'hwb',
    'rgb',
    'keyword',
    'bgHex',
    'bgHsl',
    'bgHsv',
    'bgHwb',
    'bgRgb',
    'bgKeyword',
    'ansi',
    'ansi256',
    'bgAnsi',
    'bgAnsi256'
];
/**
 * The `<Color>` compoment is a simple wrapper around the `chalk` API. It supports all of the `chalk`'s methods as `props`.
 */
const Color = (_a) => {
    var { children } = _a, colorProps = __rest(_a, ["children"]);
    if (children === '') {
        return null;
    }
    const transform = (children) => {
        // @ts-ignore
        Object.keys(colorProps).forEach((method) => {
            if (colorProps[method]) {
                if (methods.includes(method)) {
                    children = chalk_1.default[method](...arrify_1.default(colorProps[method]))(children);
                }
                else if (typeof chalk_1.default[method] === 'function') {
                    children = chalk_1.default[method](children);
                }
            }
        });
        return children;
    };
    return react_1.default.createElement(Transform_1.default, { transform: transform }, children);
};
Color.displayName = 'Color';
Color.propTypes = {
    children: prop_types_1.default.node
};
Color.defaultProps = {
    children: ''
};
exports.default = react_1.memo(Color);
//# sourceMappingURL=Color.js.map
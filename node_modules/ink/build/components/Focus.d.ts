/// <reference types="node" />
import { PureComponent } from 'react';
import type { ReactNode } from 'react';
import PropTypes from 'prop-types';
interface Props {
    children: ReactNode;
    stdin: NodeJS.ReadStream;
    stdout: NodeJS.WriteStream;
    stderr: NodeJS.WriteStream;
    writeToStdout: (data: string) => void;
    writeToStderr: (data: string) => void;
    exitOnCtrlC: boolean;
    onExit: (error?: Error) => void;
}
interface State {
    isFocusEnabled: boolean;
    activeFocusId?: string;
    focusIds: string[];
    disabledFocusIds: string[];
}
export default class App extends PureComponent<Props, State> {
    static displayName: string;
    static propTypes: {
        children: PropTypes.Validator<string | number | boolean | {} | PropTypes.ReactElementLike | PropTypes.ReactNodeArray>;
        stdin: PropTypes.Validator<object>;
        stdout: PropTypes.Validator<object>;
        stderr: PropTypes.Validator<object>;
        writeToStdout: PropTypes.Validator<(...args: any[]) => any>;
        writeToStderr: PropTypes.Validator<(...args: any[]) => any>;
        exitOnCtrlC: PropTypes.Validator<boolean>;
        onExit: PropTypes.Validator<(...args: any[]) => any>;
    };
    state: {
        isFocusEnabled: boolean;
        activeFocusId: undefined;
        focusIds: never[];
        disabledFocusIds: never[];
    };
    rawModeEnabledCount: number;
    isRawModeSupported(): boolean;
    render(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidCatch(error: Error): void;
    handleSetRawMode: (isEnabled: boolean) => void;
    handleInput: (input: string) => void;
    handleExit: (error?: Error | undefined) => void;
    enableFocus: () => void;
    disableFocus: () => void;
    registerFocusComponent: (id: string) => void;
    unregisterFocusComponent: (id: string) => void;
    enableFocusComponent: (id: string) => void;
    disableFocusComponent: (id: string) => void;
}
export {};

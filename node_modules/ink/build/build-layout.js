"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yoga_layout_prebuilt_1 = __importDefault(require("yoga-layout-prebuilt"));
const apply_styles_1 = require("./apply-styles");
const measure_text_1 = require("./measure-text");
// Traverse the node tree, create Yoga nodes and assign styles to each Yoga node
exports.buildLayout = (node, options) => {
    const { config, terminalWidth, skipStaticElements } = options;
    const yogaNode = yoga_layout_prebuilt_1.default.Node.createWithConfig(config);
    node.yogaNode = yogaNode;
    const { style } = node;
    console.log('HERE');
    // Root node of the tree
    if (node.nodeName === 'ROOT') {
        // `terminalWidth` can be `undefined` if env isn't a TTY
        yogaNode.setWidth(terminalWidth || 100);
        if (node.childNodes.length > 0) {
            const childNodes = node.childNodes.filter(childNode => {
                return skipStaticElements ? !childNode.unstable__static : true;
            });
            for (const [index, childNode] of Object.entries(childNodes)) {
                const { yogaNode: childYogaNode } = exports.buildLayout(childNode, options);
                if (childYogaNode) {
                    yogaNode.insertChild(childYogaNode, Number.parseInt(index, 10));
                }
            }
        }
        return node;
    }
    // Apply margin, padding, flex, etc styles
    apply_styles_1.applyStyles(yogaNode, style);
    if (node.nodeName === '#text') {
        // Nodes with only text have a child Yoga node dedicated for that text
        if (node.nodeValue) {
            applySize(yogaNode, node.nodeValue, style.width, style.height);
        }
    }
    else if (node.textContent) {
        // Nodes with only text have a child Yoga node dedicated for that text
        applySize(yogaNode, node.textContent, style.width, style.height);
    }
    else {
        const childNodes = node.childNodes.filter(childNode => {
            return skipStaticElements ? !childNode.unstable__static : true;
        });
        for (const [index, childNode] of Object.entries(childNodes)) {
            const { yogaNode: childYogaNode } = exports.buildLayout(childNode, options);
            if (childYogaNode) {
                yogaNode.insertChild(childYogaNode, Number.parseInt(index, 10));
            }
        }
    }
    return node;
};
const applySize = (yogaNode, text, nodeWidth, nodeHeight) => {
    const { width, height } = measure_text_1.measureText(text);
    yogaNode.setWidth(nodeWidth !== null && nodeWidth !== void 0 ? nodeWidth : width);
    yogaNode.setHeight(nodeHeight !== null && nodeHeight !== void 0 ? nodeHeight : height);
};
//# sourceMappingURL=build-layout.js.map